#! /usr/bin/env python

__version__ = '0.0.1-dev'

import sys
import json
import click

CONTEXT_SETTINGS = {'help_option_names': ['-h', '--help', '--rhonda'],}
@click.version_option(version = __version__)
@click.command(context_settings = CONTEXT_SETTINGS)
@click.option('--parse-stats', 
               type = str,
               default = None, 
               help = 'The name of the stats file generated by pairsamtools parse.')
@click.option('--dedup-stats', 
               type = str,
               default = None, 
               help = 'The name of the stats file generated by pairsamtools dedup.')
@click.option('--filterbycov-stats', 
               type = str,
               default = None, 
               help = 'The name of the stats file generated by pairsamtools filterbycov.')
@click.option('--output', 
               type = str, 
               default = None,
               help = 'The name of the output json file.')
def main(parse_stats, dedup_stats, filterbycov_stats, output):
    '''
    Convert the stats file generated by the pairsamtools to a file in json format that can be used by cooler cload or zoomify.

    If --output is not used STDOUT is used. 
    '''

    f_parse_stats = open(parse_stats, 'r')
    f_dedup_stats = open(dedup_stats, 'r')
    f_filterbycov_stats = open(filterbycov_stats, 'r')

    if output is None:
        f_out = sys.stdout
    else:
        f_out = open(output, 'w')

    data = dict()
    for line in f_filterbycov_stats:
        line = line.strip()
        (stat_name, stat_value) = line.split('\t')
        data[stat_name] = int(stat_value)

    for line in f_parse_stats:
        line = line.strip()
        (stat_name, stat_value) = line.split('\t')

        if stat_name == 'total':
            data[stat_name] = stat_value

        elif stat_name == 'total_unmapped':
            data[stat_name] = stat_value

        elif stat_name == 'total_single_sided_mapped':
            data[stat_name] = stat_value

        elif stat_name == 'total_mapped':
            data[stat_name] = stat_value
        
        else:
            continue

    for line in f_dedup_stats:
        line = line.strip()
        (stat_name, stat_value) = line.split('\t')

        if stat_name == 'total_dups':
            data[stat_name] = stat_value

        elif stat_name == 'total_nodups':
            data[stat_name] = stat_value

        else:
            continue

    json.dump(data, f_out)

if __name__ == '__main__':
    main()